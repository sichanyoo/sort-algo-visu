[{"/Users/sichanyuh/Developer/sort-algo-visu/src/index.js":"1","/Users/sichanyuh/Developer/sort-algo-visu/src/App.js":"2","/Users/sichanyuh/Developer/sort-algo-visu/src/reportWebVitals.js":"3","/Users/sichanyuh/Developer/sort-algo-visu/src/visualizer/SortAlgoVisu.jsx":"4","/Users/sichanyuh/Developer/sort-algo-visu/src/algosAndAni/sortAlgos.js":"5"},{"size":500,"mtime":1609304795070,"results":"6","hashOfConfig":"7"},{"size":264,"mtime":1609353259371,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1609196564014,"results":"9","hashOfConfig":"7"},{"size":5388,"mtime":1609380419873,"results":"10","hashOfConfig":"7"},{"size":2646,"mtime":1609379649660,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"18tyidn",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"14"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/sichanyuh/Developer/sort-algo-visu/src/index.js",[],["25","26"],"/Users/sichanyuh/Developer/sort-algo-visu/src/App.js",["27"],"import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport SortAlgoVisu from './visualizer/SortAlgoVisu';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortAlgoVisu></SortAlgoVisu>\n    </div>\n  );\n}\n \nexport default App;\n","/Users/sichanyuh/Developer/sort-algo-visu/src/reportWebVitals.js",[],"/Users/sichanyuh/Developer/sort-algo-visu/src/visualizer/SortAlgoVisu.jsx",["28","29"],"import React from 'react';\nimport './sortAlgoVisu.css';\nimport {mergeSortAni} from '../algosAndAni/sortAlgos.js';\n\n//interval between visual changes in ms\nconst SPEED = 3;\n\n//number of values to sort in array\nconst BARS = 250;\n\n//default color of bars\nconst DEFAULT_COLOR =  'rgb(161, 161, 161)';\n\n//color of bars during comparison\nconst COMP_COLOR = 'red';\n\n//color of bars at sorted position\nconst END_COLOR = 'green';\n\n//main class\nexport default class SortAlgoVisu extends React.Component {\n    constructor(props) {\n        super(props);\n        //set array as member of this.state\n        this.state = {arr: [], };\n    }\n\n    //randomize array first time website is opened\n    componentDidMount() {\n        this.initArr();\n    }\n\n    //method to re-randomize sorted array\n    initArr() {\n        //new arr to store randomized arr\n        const arr = [];\n        for (let i = 0; i < BARS; i++) {\n            arr.push(randomIntInInterval(10, 700));\n        }\n        const bars = document.getElementsByClassName('arr-bar');\n        for (let i = 0; i < bars.length; i++) {\n            bars[i].style.backgroundColor = DEFAULT_COLOR;\n        }\n\n        //reset this.state as newly randomized array using setState()\n        this.setState({arr});\n    }\n\n    /*//////////////////////////////////////\n        sort algo methods \n    *///////////////////////////////////////\n    mergeSort() {\n        //array of indices compared to recreate sorting in real time animation\n        const ani = mergeSortAni(this.state.arr);\n\n        //loop through all index comparisons in ani\n        for (let i = 0; i < ani.length; i++) {\n            //get the html collection of bars\n            const bars = document.getElementsByClassName('arr-bar');\n            //boolean that tells us that at every 3rd value we change heights\n            //and at 1st and 2nd we toggle colors\n            const toggle = i % 3 != 2;\n\n            //if i reached the last index pair, that means the sort sequence is over\n            //then, change the bars from to left to right to be green\n            if (i == ani.length -1) {\n                //loop from 0 to bars.length-1\n                for (let j = 0; j < bars.length; j++) {\n                    //offset time by i * SPEED (the moment at which sort sequence ends)\n                    //and then add j * SPEED to it\n                    setTimeout(() => {\n                        bars[j].style.backgroundColor = END_COLOR;\n                    }, (i * SPEED) + (j * SPEED));\n                }\n            } else if (toggle) {\n                //if toggle is 0 or 1, then it is just changing color time\n                //get the indices of two bars being compared at this instant\n                const [one, two] = ani[i];\n                //if i % 3 is 0, that means color has to go from default to comp since current color is default (at beginning of comparison)\n                //if i % 3 is 1, that means color has to go from comp to default since current color is comp (at end of comparison)\n                const color = i % 3 === 0 ? COMP_COLOR : DEFAULT_COLOR;\n                //toggle bar colors at set speed (constant at top)\n                setTimeout(() => {\n                    bars[one].style.backgroundColor = color;\n                    bars[two].style.backgroundColor = color;\n                }, i * SPEED);\n            } else {\n                //else here would mean that it is time to overwrite bar height\n                setTimeout(() => {\n                    const [idx, newHt] = ani[i];\n                    const barStyle = bars[idx].style;\n                    barStyle.height = newHt + 'px';\n                }, i * SPEED);\n            }\n        }\n    }\n\n    quickSort() {\n\n    }\n\n    heapSort() {\n\n    }\n\n    bubbleSort() {\n\n    }\n\n    countingSort() {\n\n    }\n\n    //render method\n    render() {\n        const {arr} = this.state;\n\n        return (\n            <div className = \"arr-container\">\n                <br></br>\n                <div className = \"toolbar\">\n                    <button onClick={() => this.initArr()} className = \"generate-button\">Generate New Array</button>\n                    &nbsp;\n                    <button onClick={() => this.mergeSort()} className = \"button\">Merge Sort</button>\n                    &nbsp;\n                    <button onClick={() => this.quickSort()} className = \"button\">Quick Sort</button>\n                    &nbsp;\n                    <button onClick={() => this.heapSort()} className = \"button\">Heap Sort</button>\n                    &nbsp;\n                    <button onClick={() => this.bubbleSort()} className = \"button\">Bubble Sort</button>\n                    &nbsp;\n                    <button onClick={() => this.countingSort()} className = \"button\">Counting Sort</button>\n                </div>\n                <br></br>\n                <br></br>\n                {arr.map((value, idx) => (\n                    <div \n                        className = \"arr-bar\" \n                        key = {idx} \n                        style = {{\n                            height: value, \n                    }}></div>\n                ))}\n                <br></br>\n                <br></br>\n            </div>\n        );\n    }\n\n}\n\n//function to generate random int betweeen min and max, inclusive\nfunction randomIntInInterval(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n","/Users/sichanyuh/Developer/sort-algo-visu/src/algosAndAni/sortAlgos.js",[],{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","severity":1,"message":"35","line":2,"column":8,"nodeType":"36","messageId":"37","endLine":2,"endColumn":12},{"ruleId":"38","severity":1,"message":"39","line":62,"column":34,"nodeType":"40","messageId":"41","endLine":62,"endColumn":36},{"ruleId":"38","severity":1,"message":"42","line":66,"column":19,"nodeType":"40","messageId":"41","endLine":66,"endColumn":21},"no-native-reassign",["43"],"no-negated-in-lhs",["44"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","no-global-assign","no-unsafe-negation"]